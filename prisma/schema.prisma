// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enum: 소비 유형을 위한 열거형 ---
enum ConsumptionType {
  AMOUNT
  PERCENTAGE
}

// --- 메인 프로필 모델 ---
model FinancialProfile {
  id                         String    @id @default(cuid())
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  
  // 이름과 가족 정보
  name                    String?
  familyMembers           Json?

  // 미래 계획
  dob                        DateTime? // 생년월일
  retirementAge              Int?      // 정년
  peakWagePeriod             Int?      // 임금피크 기간
  peakWageReductionRate      Float?    // 임금피크 감소율
  
  // 월별 고정 지출
  consumptionType            ConsumptionType @default(AMOUNT) // 소비 유형 (금액 or 비율)
  monthlyConsumptionValue    Float?          // 소비 금액 또는 비율 값
  monthlyInsurance           Float?          // 월별 보험료
  monthlySavings             Float?          // 월별 적금
  monthlyRepayment           Float?          // 월별 원리금 상환액
  
  summary                 Json?

  // 관계 설정
  monthlyIncomes             MonthlyIncome[] // 1:N 관계 (한 프로필에 여러 월별 수입)
  loans                      Loan[]          // 1:N 관계 (한 프로필에 여러 대출)
  projectedData              ProjectedData[]

  realEstateAssets            RealEstateAsset[]
  salaryInflationRate       Float? 

  projectedLoanStates     ProjectedLoanState[]
}

// --- 프로젝션 데이터 모델 (월별 현금 흐름 및 자산 추정치) ---
model ProjectedData {
 id       String  @id @default(cuid())
 year      Int
 month     Int
 income     Float?
 bonus     Float?
 loanInterestPaid Float?
 loanPrincipalPaid Float?
 // totalLoanPayment Float?
 monthlyConsumption Float?
 cumulativeSavings Float?
 remainingLoanPrincipalTotal Float?
 disposableIncome Float?
 endOfYearAssets Float?
 isOverridden  Boolean @default(false)
 realEstateValue Float?
 totalAssets     Float? 

 // ✨ 관계 설정
 profileId   String
 projectedLoanStates ProjectedLoanState[]
 financialProfile FinancialProfile @relation(fields: [profileId], references: [id], onDelete: Cascade) 

 @@unique([profileId, year, month])
}

// --- 월별 수입 모델 ---
model MonthlyIncome {
  id                  String   @id @default(cuid())
  month               Int      // 월 (1 ~ 12)
  income              Float    // 수입
  bonus               Float    // 보너스
  
  // 관계 설정
  profileId           String
  financialProfile    FinancialProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, month]) // 한 프로필에 같은 월이 중복되지 않도록 설정
}

// --- 대출 정보 모델 ---
model Loan {
  id                  String   @id @default(cuid())
  name         String?  // 대출 이름
  type         String?  // 대출 종류
  principal           Float    // 대출 원금
  interestRate        Float    // 연이율
  termInYears     Int?   // 대출 기간 (연 단위)  
  gracePeriodInYears Int? // 거치기간 추가
  paymentMethod String // 예: '원리금균등', '원금균등', '만기일시'
  
  // 관계 설정
  profileId           String
  financialProfile    FinancialProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  projectedLoanStates ProjectedLoanState[]
}

// --- [추가] 부동산 자산 모델 ---
model RealEstateAsset {
  id           String   @id @default(cuid())
  name         String   // 자산 이름 (예: 아파트, 오피스텔)
  currentValue Float    // 현재 가치 (만원)

  // 관계 설정
  profileId    String
  financialProfile FinancialProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// 💡 새로운 모델: 월별 개별 대출 상태 저장
model ProjectedLoanState {
  id                    String   @id @default(cuid())
  year                  Int
  month                 Int

  // 💡 대출 상태 정보
  principalPaid         Float?
  interestPaid          Float?
  remainingPrincipal    Float?
  
  // 💡 관계 설정
  profileId             String
  loanId                String
  projectedDataId       String
  
  // 💡 연결된 모델
  financialProfile      FinancialProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  loan                  Loan             @relation(fields: [loanId], references: [id])
  projectedData         ProjectedData    @relation(fields: [projectedDataId], references: [id])

  @@unique([projectedDataId, loanId])
}